#include<stdio.h>
#include<string.h>

#define BK 10
#define SL 1

int hashtable[BK][SL];

int hash(int key) { //버킷으로 사용할 수를 리턴한다.
	return key % 10; 
}

void AddKey(int key) {
	int bucket = hash(key);

	for (;;) { //무한 반복
		if (hashtable[bucket][0] == 0) {
			hashtable[bucket][0] = key; //버킷이 비어있으면 key 넣기
			break; // 슬롯의 크기만큼 반복하다가 그 안에 값이 비어있으면 key값을 넣고 함수를 종료하라
		}
		else {
			bucket = bucket + 1; // 버킷이 비어있지 않으면, 버킷의 크기를 한 칸 늘려준다.
		}
	}
}

bool FindKey(int key) {
	int bucket = hash(key); //검색할 값인 key의 버킷을 가져온다.

	for (int i = 0; i < SL; i++) {
		if (hashtable[bucket][0] == key) {//슬롯만큼 반복하면서 해당 버킷의 인덱스와 key값을 비교한다.
			return true;
		}
		else {
			bucket = bucket + 1;
		}false; //만약 key 값을 찾았다면 true를 못찾으면 false를 리턴함
	}
}
void main() {

	memset(hashtable, 0, sizeof(hashtable));

	int key = 0;

	for (int i = 0; i < 5; i++) {
		printf("값을 입력해주세요.");
		scanf_s("%d", &key);
		AddKey(key);
	}


	printf("검색할 값을 입력하세요.");
	scanf_s("%d", &key);

	if (FindKey(key)) {
		printf("값이 있습니다");
	}
	else {
		printf("없음");
	}

}
