#include<stdio.h>
#include<stdlib.h>

//1. 큐 메모리 할당(초기화)
//2. 큐 데이터 삽입
//3. 큐가 가득찬 상태에서 삽입
//4. 큐를 삭제(어떤 데이터 삭제되었는지 출력해보기)
//5/ 큐 메모리 해제(반환)

//전역변수 선언. 여러 함수에서 써야하는 변수들 이라서!

int* queue;
int qsize;
int head, tail; //맨 앞에 처리되는 부분인 head, 맨 뒤에 삽입되는 부분인 tail


//1.큐 메모리 할당/초기화
void InitQueue(int size) {
	qsize = size;
	queue = (int*)malloc(qsize * sizeof(int)); //총 40바이트 할당
	head = tail = 0; //두 값이 같으면 이렇게 연달아서 써도 된다! queue[head=0] queue[tail=0]
}

void freeMalloc() {
	free(queue);
}

//2. 큐 데이터 삽입
int insert(int data){
	if ((tail + 1) % qsize == head) { 
		return 0;
	}

	queue[tail] = data; //data(0부터8까지의 9개 숫자)가 queue[0]~queue[9]에 채워짐 
	tail = (tail + 1) % qsize;
//queue[head=0] queue[tail=1] 즉, tail
//따라서 queue[tail+1=9]일때까지 저장한다. tail은 8까지여야 하며, 만약 9가 되면 tail+1=10이 되므로 할당된 메모리를 오버한다.
	return 1;
}

//3. 큐 데이터 삭제
int Delete() {
	if (head == tail) { //head 인덱스가 +1이 되어서 tail인덱스를 만나게 되면 그만 delete한다.
		return -1;
	}

	int data = queue[head];
	head = (head + 1) % qsize;
	return data;
}

void main() {
	InitQueue(10); //queue[0]부터 queue[9]까지 총 10개의 슬롯이 메모리에서 할당됨.

	printf("아무것도 삽입하지 않고 빈 상태에서 삭제: %d\n", Delete()); //데이터가 들어오지 않아서 head와 tail이 0으로 같아서 return -1받음
	
if (Delete() == -1) {
		printf("메모리에 데이터가 비어있어 삭제할 수 없습니다.\n");
	}
	
	for (int i = 0; i < 9; i++) {
		insert(i);
	}
	// 총 9개의 값만을 넣어준다. 10개부터는 head[0]값이 이미 있어서 오버플로우가 발생한다. 0~8까지 총 9개 값만 넣어준다. 


	printf("가득찬 상태에서 데이터 삽입 시: %s\n", insert(100) ? "성공":"실패"); //1이 들어오면 true로 성고 0이면 false로 실패

	for (int j = 0; j < 9; j++) {
		printf("삭제하고 있는 데이터 : %d\n", Delete());
	}

	freeMalloc();
}
