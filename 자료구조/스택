#include<stdio.h>
#include<stdlib.h>

int* stack; //스택메모리 생성. 스택 안에는 힙메모리로 가는 주소가 들어간다. Initstack함수에서 malloc으로 메모리 할당
int top;

//1. 메모리 생성
void InitStack(int aSize) { //배열의 길이를 인자로 받음.
	stack = (int*)malloc(aSize * sizeof(int)); //malloc은 void 포인터 타입을 가졌다. 즉, 어떤 특정 타입을 가진 게 아니라 걍 덩어리로 데이터를 할당하는 것이다. 따라서 malloc 앞에 타입을 정해줘야 한다.
	//asize는 10개 x 4바이트 = 총 40바이트를 말록으로 할당함.
	top = -1;

}

//+ malloc 이후 free
void FreeStack() {
	free(stack); //malloc으로 메모리 할당 후에는 free를 해주어야 메모리 누수를 방지한다!
}

//2. 데이터 추가
int Add(int data, int size) {
	//만약 정해둔 스텍보다 더 많이 호출하면 top이 -1이하가 되어버릴 수있다. 따라서 호출가능한 횟수를 정해두자
	if (top < size - 1) { //top이 size인 10보다는 작을동안만 ++가 실행되어야 함. 즉, top이 9일 때 ++로 10이되면서 사이즈에 맞게 끝난다.
		top++; // 호출될 때마다 top이 원래의 -1에서 1씩 증가함
		stack[top] = data; //현재 스택의 0인덱스에 데이터 넣기
		return 1; //데이터 추가가 실패할 경우에 확인을 위해 임시로 리턴값 줘 봄
	}
	else {
		return 0;
	}

}

//3. 데이터 삭제
int Pop() {
	if (top >= 0) { //Pop을 호출할 때마다 top인덱스가 1씩 감소하며 스텍에 저장된 값이 출력된다.
		return stack[top--];  // Add에서 증가했던 top에서 1씩 감소함. 감소 후에 리턴을 함
	}
	return -1; //만약 사이즈에 벗어나서 호출될 경우 top은 0보다 작아지게 될 것이고, -1이 프린트 될 것임
}

void main() {
	int size = 10;
	InitStack(size);

	for (int j = 0; j < size; j++) {
		Add(j,size);
	}

	for (int a = 0; a < size; a++) {
		printf("%d\n", Pop());
	}

	printf("%d\n", Pop()); // 오버해서 출력할 시 이러면 -1이 프린트될 것임.
	
	FreeStack();
}
